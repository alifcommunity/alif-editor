{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/powershell/powershell.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","keywords","helpKeywords","symbols","escapes","tokenizer","root","cases","next","string","herestring","comment"],"mappings":"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","file":"powershell.fca6e526.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    // the default separators except `$-`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '#',\n        blockComment: ['<#', '#>']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*#region\\\\b'),\n            end: new RegExp('^\\\\s*#endregion\\\\b')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.ps1',\n    brackets: [\n        { token: 'delimiter.curly', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' }\n    ],\n    keywords: [\n        'begin',\n        'break',\n        'catch',\n        'class',\n        'continue',\n        'data',\n        'define',\n        'do',\n        'dynamicparam',\n        'else',\n        'elseif',\n        'end',\n        'exit',\n        'filter',\n        'finally',\n        'for',\n        'foreach',\n        'from',\n        'function',\n        'if',\n        'in',\n        'param',\n        'process',\n        'return',\n        'switch',\n        'throw',\n        'trap',\n        'try',\n        'until',\n        'using',\n        'var',\n        'while',\n        'workflow',\n        'parallel',\n        'sequence',\n        'inlinescript',\n        'configuration'\n    ],\n    helpKeywords: /SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,\n    // we include these common regular expressions\n    symbols: /[=><!~?&%|+\\-*\\/\\^;\\.,]+/,\n    escapes: /`(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // commands and keywords\n            [\n                /[a-zA-Z_][\\w-]*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': ''\n                    }\n                }\n            ],\n            // whitespace\n            [/[ \\t\\r\\n]+/, ''],\n            // labels\n            [/^:\\w*/, 'metatag'],\n            // variables\n            [\n                /\\$(\\{((global|local|private|script|using):)?[\\w]+\\}|((global|local|private|script|using):)?[\\w]+)/,\n                'variable'\n            ],\n            // Comments\n            [/<#/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n            // delimiters\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n            [/\\d+?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings:\n            [/\\@\"/, 'string', '@herestring.\"'],\n            [/\\@'/, 'string', \"@herestring.'\"],\n            [\n                /\"/,\n                {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\"' }\n                    }\n                }\n            ],\n            [\n                /'/,\n                {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: \"@string.'\" }\n                    }\n                }\n            ]\n        ],\n        string: [\n            [\n                /[^\"'\\$`]+/,\n                {\n                    cases: {\n                        '@eos': { token: 'string', next: '@popall' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [\n                /@escapes/,\n                {\n                    cases: {\n                        '@eos': { token: 'string.escape', next: '@popall' },\n                        '@default': 'string.escape'\n                    }\n                }\n            ],\n            [\n                /`./,\n                {\n                    cases: {\n                        '@eos': {\n                            token: 'string.escape.invalid',\n                            next: '@popall'\n                        },\n                        '@default': 'string.escape.invalid'\n                    }\n                }\n            ],\n            [\n                /\\$[\\w]+$/,\n                {\n                    cases: {\n                        '$S2==\"': { token: 'variable', next: '@popall' },\n                        '@default': { token: 'string', next: '@popall' }\n                    }\n                }\n            ],\n            [\n                /\\$[\\w]+/,\n                {\n                    cases: {\n                        '$S2==\"': 'variable',\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [\n                /[\"']/,\n                {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': {\n                            cases: {\n                                '@eos': { token: 'string', next: '@popall' },\n                                '@default': 'string'\n                            }\n                        }\n                    }\n                }\n            ]\n        ],\n        herestring: [\n            [\n                /^\\s*([\"'])@/,\n                {\n                    cases: {\n                        '$1==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [/[^\\$`]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/`./, 'string.escape.invalid'],\n            [\n                /\\$[\\w]+/,\n                {\n                    cases: {\n                        '$S2==\"': 'variable',\n                        '@default': 'string'\n                    }\n                }\n            ]\n        ],\n        comment: [\n            [/[^#\\.]+/, 'comment'],\n            [/#>/, 'comment', '@pop'],\n            [/(\\.)(@helpKeywords)(?!\\w)/, { token: 'comment.keyword.$2' }],\n            [/[\\.#]/, 'comment']\n        ]\n    }\n};\n"]}